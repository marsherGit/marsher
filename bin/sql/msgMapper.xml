<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="message">
	<!-- getReceiveMsgList -->
	<select id="getReceiveMsgList" resultType="spring.message.ReceiveMsg">
		select num, re_title, re_receiver, re_sender, re_regdate, re_checkDate, r
		from (select num, re_title, re_receiver, re_sender, re_regdate, re_checkDate, rownum r
		from (select num, re_title, re_receiver, re_sender, re_regdate, re_checkDate 
		from receiveMsg order by num desc) order by num desc) where r &gt;= #{startRow, jdbcType=INTEGER} and r &lt;= #{endRow, jdbcType=INTEGER}
	</select>
	
	<!-- getReceiveMsgCount -->
	<select id="getReceiveMsgCount" resultType="int" parameterType="String">
		select count(*) from receiveMsg where re_receiver=#{memId}
	</select> 
	
	<!-- getSendMsgList -->
	<select id="getSendMsgList" resultType="spring.message.SendMsg">
		select num, se_title, se_receiver, se_sender, se_regdate, se_checkDate, r
		from (select num, se_title, se_receiver, se_sender, se_regdate, se_checkDate, rownum r 
		from (select num, se_title, se_receiver, se_sender, se_regdate, se_checkDate 
		from sendMsg order by num desc)order by num desc) where r &gt;= #{startRow, jdbcType=INTEGER} and r &lt;= #{endRow, jdbcType=INTEGER} 
	</select> 
	
	<!-- getSendMsgCount -->
	<select id="getSendMsgCount" resultType="int" parameterType="String">
		select count(*) from sendMsg where se_sender=#{memId}
	</select>
	
	<!-- message insert -->
	<insert id="insertSe" parameterType="spring.message.SendMsg">
		insert into sendMsg(num, se_title, se_content, se_receiver, se_sender, se_regdate, st_id) 
		values(sendMsg_se_num.NEXTVAL,#{se_title},#{se_content},#{se_receiver},#{se_sender},SYSDATE, #{st_id})
	</insert>
	
	<insert id="insertRe" parameterType="spring.message.ReceiveMsg">
		insert into receiveMsg(num, re_title, re_content, re_receiver, re_sender, re_regdate, st_id)
		select num, se_title, se_content, se_receiver, se_sender, se_regdate, st_id from sendMsg S
		where not exists(select * from receiveMsg where num=S.num) 
		 
	</insert>
	 
	
	<!-- getReceiveMsg content-->
	<select id="getReceiveMsg" resultType="spring.message.ReceiveMsg" parameterType="int">
		select num, re_sender, re_receiver, re_regdate, re_checkDate, re_title, re_content 
		from receiveMsg where num = #{num}
	</select>
	
	<!-- getSendMsg content-->
	<select id="getSendMsg" resultType="spring.message.SendMsg" parameterType="int">
		select num, se_sender, se_receiver, se_regdate, se_checkDate, se_title, se_content 
		from sendMsg where num = #{num}
	</select>
	
	<!-- deleteReceive -->
	<delete id="deleteReceive" parameterType="spring.message.ReceiveMsg">
		delete from receiveMsg where num=#{num}
	</delete>
	
	<!-- 보낸쪽지 delete -->
	<delete id="deleteSend" parameterType="spring.message.SendMsg">
		delete from sendMsg where num=#{num}
	</delete>
	
	<!-- 확인날짜 insert -->
		
	<update id="updateReDate" parameterType="int"> 
		update receiveMsg set re_checkDate=SYSDATE where num=#{num} and re_checkDate is null 
	</update>
	 
	<update id="updateSeDate" parameterType="int">
		update sendMsg set se_checkDate=(select re_checkDate from receiveMsg where num=#{num}) where num=#{num} and se_checkDate is null
	</update> 
	
	<!-- getNewMsgCount -->
	<select id="getNewMsgCount" resultType="int" parameterType="String"> 
		select count(*) from receiveMsg where re_checkDate is null and re_receiver=#{memId}
	</select>
</mapper>